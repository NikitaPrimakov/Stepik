#####################################################
## День 2. Тема урока: ввод-вывод данных, переменные#
#####################################################

## Параметры sep и end
#------------------------------

# По умолчанию команда print() принимает несколько аргументов, выводит их через один пробел, после чего ставит перевод строки. 
# Это поведение можно изменить, используя необязательные именованные параметры sep и end.

# У команды print() есть параметр, который отвечает за разделение аргументов при выводе. 
# Этот параметр называется sep (separator – разделитель). По умолчанию этот параметр равен символу пробела

# Таким образом, мы можем установить любой другой символ в качестве разделителя:

print('Hello', 'world', sep='-') # Hello-world

# Мы можем изменить параметр sep на любую другую строку, например, на символ звёздочки *.

print('Hello', 'world', sep='*') # Hello*world

# Параметр sep может принимать и более сложные значения, например, строки с несколькими символами:

print('Hello', 'world', sep='***') # Hello***world

#  В параметр sep можно передать значение переменной

new_string = '*'

print('Hello', 'world', sep=new_string) # Hello*world

# Теперь давайте рассмотрим ситуацию, когда у нас не один print(), а несколько.

# Приведённый ниже код:

print("A great man doesn't seek to lead.")
print("He's called to it. And he answers.")

# Выводит: 
    # A great man doesn't seek to lead.
    # He's called to it. And he answers.
    
# Как вы можете заметить, после каждого print() курсор переходит на новую строку. 
# И это поведение тоже не является случайным, потому что у команды print() есть параметр end, определяющий, 
# что нужно добавить в конец вывода. По умолчанию параметр end равен символу перевода строки (\n).

print("A great man doesn't seek to lead.", end='\n')
print("He's called to it. And he answers.", end='\n')

# Если перевод строки делать не нужно или требуется указать специальное окончание для вывода, 
# то следует явно указать значение для параметра end (можем указать через переменную, как и с параметром sep).

print("Hello world", end='!')
print("My name is Nikita", end='!') # Hello world!My name is Nikita!

# Можно также параметр end задать при помощи переменной

new_end = '!!!'

print("Hello world", end=new_end)
print("My name is Nikita", end=new_end) # Hello world!!!My name is Nikita!!!

# Примечание 1. Параметры sep и end можно устанавливать одновременно.

print('Hello', 'world', sep='*', end='\n') # Hello*world

# Примечание 2. Для разных команд print() можно задавать разные параметры sep и end.

arg1 = 'Hello'
sep1 = '_-_'
end2 = '+++'

print(arg1, 'everyone', sep=sep1, end='! ')
print('How', 'are', 'you', 'in', '2024?', sep=' ', end=end2) # Hello_-_everyone! How are you in 2024?+++

# Примечание 3. Чтобы убрать все дополнительные выводимые символы, можно установить параметры sep и end команды print() как пустые строки ('').

print('a', 'b', 'c', sep='', end='')
print('d', 'e', 'f', sep='', end='') # выводит: abcdef

# Примечание 4. Мы не можем указывать параметры sep и end перед аргументами, 
# так как именованные параметры всегда должны следовать после позиционных аргументов. 
# Подробнее эту тему мы разбираем в курсе для продвинутых, сейчас же рекомендуем вам просто запомнить.

# Примечание 5.  Параметр sep является разделителем для нескольких аргументов в команде print().
# Если аргумент в команде print() только один, то параметру sep нечего разделять. В таком случае параметр sep никак не будет влиять на выводимый текст.

print('Hello', sep='*') # Hello


## Множественное присваивание
#------------------------------

# В языке Python за одну инструкцию присваивания можно задавать значения сразу нескольким переменным. Делается это так:

name, surname = 'Timur', 'Guev'
print('Имя:', name, 'Фамилия:', surname) # Имя: Timur Фамилия: Guev

# Если требуется считать текст с клавиатуры и присвоить его в качестве значения переменным, то можно написать так: 

name, surname = input(), input()
print('Имя:', name, 'Фамилия:', surname)

# Множественное присваивание удобно использовать, когда нужно обменять значения двух переменных. В Python это делается так:

name1 = 'Timur'
name2 = 'Gvido'
name1, name2 = name2, name1 # name1 = 'Gvido', name2 = 'Timur'

# Обратите внимание, что для обмена значений переменных следующий вариант не сработает:

name1 = 'Timur'
name2 = 'Gvido'

name1 = name2
name2 = name1

# Дело в том, что инструкция name1 = name2 полностью стирает старое значение переменной name1. 
# Когда мы в инструкции name2 = name1 присваиваем для переменной name2 значение переменной name1, 
# этим значением уже не является строка 'Timur', этим значением уже является строка 'Gvido'.


#####################################################
## День 2. Тема урока: работа с целыми числами      #
#####################################################

# Чтобы в Python создать переменную целого типа данных, нужно опустить кавычки при объявлении переменной. Рассмотрим следующий код:

num1 = 7                # num1 - это число
num2 = 10               # num2 - это число
num3 = num1 + num2      # num3 - это число

print(num3)             # 17

# С числами можно совершать различные арфиметические действия

a = 3
b = 2

print(a + b) # 5
print(a - b) # 1
print(a * b) # 6
print(a / b) # 1.5

# Порядок выполнения операций в Python аналогичен порядку выполнения операций, которые вы изучали на уроках математики.

num1 = 2 + 3 * 4
num2 = (2 + 3) * 4

print(num1) # 14
print(num2) # 20

## Преобразование типов
#------------------------------

# Для того чтобы преобразовать строку к целому числу, мы используем команду int().

s = '1992'
year = int(s)
print(year) # 1992

# Переменная s имеет строковый тип данных. С помощью команды int() мы преобразовали строку к целому числу и записали результат в переменную с именем year. 
# Мы используем новую команду (точнее, функцию) – int(). 
# Она означает следующее: "Возьми то, что указано в качестве аргумента в скобках, и преврати это в целое число". 
# Таким образом, переменная year имеет целый тип данных, а переменная s – строковый тип данных.

# По умолчанию функция input() считывает строку на стандартный поток ввода.
# Чтобы функция input() считала целое число, нужно указать параметр типа int.

year = int(input()) # 1992

#  Для того чтобы преобразовать целое число в строку, мы используем команду str(). Рассмотрим следующий код:

num = 17
s = str(num)         # теперь s содержит строку '17'


#####################################################
## День 2. Тема урока: работа с целыми числами      #
#####################################################

# Мы познакомились с 4 основными математическими операциями в языке Python: сложение (+), вычитание (-), умножение (*) и деление (/).
# Добавив ещё 3 операции, мы получим инструментарий, достаточный для написания 99% программ.

# **	Возведение в степень
# %	    Остаток от деления
# //	Целочисленное деление

print(2 ** 3) # 8
print(10 % 3) # 1
print(10 // 3) # 3

# Обратите внимание: оператор возведения в степень (**) может возводить не только в положительную степень, но и в отрицательную. Аналогично, основание степени 
# a также может быть числом отрицательным.

print(2**(-2)) # 0.25
print((-3)**3) # -27

# Обратите внимание: оператор возведения в степень (**) является правоассоциативным (значение выражения вычисляется справа налево) в соответствии с правилами математики. 
# Таким образом, выражение x ** y ** z вычисляется как x ** (y ** z).

print(2 ** 2 ** 3)     # 2 ** (2 ** 3) = 2 ** 8

# Для положительных чисел оператор целочисленного деления (//) ведёт себя как обычное деление, за исключением того, что он отбрасывает десятичную часть результата.

print(10 // 3) # 3 
print(10 // 4) # 2 
print(10 // 5) # 2
print(10 // 6) # 1
print(10 // 12) # 0

# При делении отрицательных чисел необходимо помнить, что результат целочисленного деления не превосходит частное.
# Другими словами, округление всегда берётся в меньшую сторону.

print(10 // 3) # 3
print(-10 // 3) # -4

# Оператор деления с остатком (%) возвращает остаток от деления двух целых чисел. Рассмотрим работу данного оператора на примерах.

print(10 % 3) # 1
print(10 % 4) # 2
print(10 % 5) # 0
print(10 % 6) # 4
print(10 % 12) # 10
print(10 % 20) # 10

# Как видно из таблицы, операторы умножения (*) и все операторы деления (/, //, %) имеют равные приоритеты. 
# А у оператора возведения в степень (**) приоритет выше, чем у любого другого арифметического оператора, кроме скобок (()).

# Обратите внимание: при 0 < n < m результатом деления n % m является число n, а результатом деления n // m является число 0.

print(5 % 9) # 5
print(3 % 13) # 3 
print(5 // 9) # 0
print(3 // 13) # 0


## Обработка цифр числа
#------------------------------

# При помощи операции нахождения остатка и целочисленного деления можно достаточно несложно вычислить любую цифру числа.

# Рассмотрим программу получения цифр двузначного числа:

num = 17
a = num % 10
b = num // 10
print(a) # 7
print(b) # 1

# Рассмотрим программу получения цифр трёхзначного числа:

num = 754
a = num % 10
b = (num % 100) // 10
c = num // 100
print(a) # 4
print(b) # 5
print(c) # 7

## Алгоритм получения цифр n-значного числа
#------------------------------------------

# Несложно понять, по какому алгоритму можно найти каждую цифру n-значного числа num:

# Последняя цифра: (num % 10^1) // 10^0;
# Предпоследняя цифра: (num % 10^2) // 101;
# Предпредпоследняя цифра: (num % 10^3) // 10^2;
# .....
# Вторая цифра: (num % 10^(n-1)) // 10^n-2;
# Первая цифра: (num % 10^n) // 10^(n-1).