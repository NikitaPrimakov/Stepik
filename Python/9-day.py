#####################################################
## День 9. Тема урока: частые сценарии              #
#####################################################

## Подсчет количества
# -------------------

# Нередко нужно, чтобы наши программы подсчитывали, сколько раз что-либо произошло. 
# К примеру, видеоигра может подсчитывать количество поворотов персонажа, или математическая 
# программа может считать, как много чисел обладают некоторым свойством. Ключ к подсчету – 
# использование переменной счетчика. 
# 
# Напишем программу, которая считывает 10 чисел и определяет, сколько из них больше 10.

count = 0
for i in range(10):
    num = int(input())
    if num > 10:
        count = count + 1
print("Количество чисел больше 10:", count)

# Каждый раз, когда мы считываем число, большее 10, мы добавляем 1 
# к нашему текущему значению переменной counter. В программе это 
# реализовано в строке counter = counter + 1. Обратите внимание на 
# начальное значение переменной счетчика counter = 0. Без начального 
# значения мы получили бы ошибку, поскольку, дойдя до строки counter = 
# counter + 1, Python ничего не знал бы о переменной counter. 
# Строка кода counter = counter + 1 означает: возьми старое значение 
# переменной counter, прибавь к нему 1 и переприсвой переменной это 
# значение. Если не придать переменной начальное значение, то непонятно,
# к чему прибавлять 1 в самый первый раз.

# Подсчет количества – это очень частый сценарий. Он состоит из двух шагов:
#   - Создание переменной счетчика, и придание ей первоначального значения: counter = 0;
#   - Увеличение переменной счетчика на 1: counter = counter + 1.


# Часто при написании программ требуется использовать несколько счетчиков. 
# Модифицируем предыдущую программу: посчитаем еще и количество нулей среди введенных чисел.

counter1 = 0
counter2 = 0
for _ in range(10):
    num = int(input())
    if num > 10:
        counter1 = counter1 + 1
    if num == 0:
        counter2 = counter2 + 1

print('Было введено', counter1, 'чисел, больших 10.')
print('Было введено', counter2, 'нулей.' )


# Рассмотрим еще один пример: подсчитать количество чисел из диапазона [1;100], 
# квадрат которых оканчивается на 4.

counter = 0
for i in range(1, 101):
    if i**2 % 10 == 4:
        counter = counter + 1

print(counter)

# Мы используем функцию range() с двумя параметрами для генерации последовательности чисел от 1 до 100
# Каждый раз, когда переменная i последовательно принимает значения от 1 до 100, 
# мы проверяем условие: i**2 % 10 == 4 (оканчивается ли квадрат числа i на 4).

## Вычисление суммы и произведения
# --------------------------------

# Наравне с подсчетом количества по частоте стоит задача вычисления суммы. 
# К примеру, видеоигра должна считать сумму очков. В таком случае начальное значение переменной будет равно 0, 
# а далее оно будет увеличиваться на некоторое количество заработанных очков, скажем на 10
# Мы пишем следующий код:

# score = 0
# ...
# score = score + 10

# Напишем программу, которая считывает 10 чисел и определяет сумму тех из них, которые больше 10.

count = 0
for i in range(10):
    num = int(input("Введите число: "))
    if num > 10:
        count = count + num
print(count)

# Каждый раз, когда программа считывает число, большее 10, она добавляет его к текущему значению переменной count. 
# Это реализовано в строке count = count + num. Обратите внимание на начальное значение переменной-сумматора count = 0. 
# Без начального значения мы получили бы ошибку, поскольку, дойдя до строки count = count + num, 
# Python ничего не знал бы о переменной count. Строка кода count = count + num означает: возьми старое значение 
# переменной count, прибавь к нему num и переприсвой переменной это значение. 
# Если не придать переменной начальное значение, то не к чему прибавлять num в самый первый раз.

# Подсчет суммы состоит из двух шагов:

#   1) Создание переменной сумматора и придание ей первоначального значения: count = 0;
#   2) Увеличение переменной сумматора на нужное число: count = count + num.

# Напишем программу, которая считает сумму натуральных чисел от 1 до 100:

count = 0

for i in range(1, 101):
    count = count + i
print(count)

# Рассмотрим еще один пример: напишем программу, которая запрашивает 10 
# целых чисел и находит их среднее значение:

countOne = 0
countTwo = 0
for i in range(10):
    num = int(input("Введите число: "))
    countOne = countOne + 1
    countTwo = countTwo + num
print("Среднее значение: ", countTwo / countOne)

# Аналогичным образом вычисляется произведение. При вычислении произведения 
# начальное значение переменной мультипликатора мы устанавливаем равным 1, 
# в отличие от сумматора, где оно равно 0.


## Обмен значений переменных
# --------------------------------

# Очень часто нам требуется обменять значения двух переменных x и y. 
# Начинающие программисты иногда пишут такой код:

# x = y
# y = x

# Однако он не работает. Предположим, что x = 3 и y = 5. Первая строка присвоит переменной x значение 5,
# что правильно, однако вторая строка установит значение переменной y в 5, поскольку значение x уже равно 5. 
# Для решения задачи мы можем использовать временную переменную:

# temp = x
# x = y
# y = temp

# Такой код пишут почти во всех языках программирования. Однако в Python есть и более простой способ. 
# Мы можем написать так:

# x, y = y, x

# В результате выполнения такого кода Python поменяет значения переменных x и y местами.


## Сигнальные метки
# --------------------------------


# Сигнальная метка (флажок) может использоваться, когда надо, чтобы одна часть программы узнала о происходящем 
# в другой части программы. Напишем программу, определяющую, что натуральное число является простым:

num = int(input()) # вводим произвольное число
flag = True

for i in range(2, num):
    if num % i == 0:  #  если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False

if num == 1:
    print('Это единица, она не простая и не составная') 
elif flag == True:
    print('Число простое')
else:
    print('Число составное')

# Напомним, что число является простым, если оно не имеет делителей, кроме 1 и самого себя.
# Вышеприведенная программа работает следующим образом: начальное значение переменной флага равно True, 
# что говорит о том, что число является простым. Затем мы перебираем все числа от 2 до num - 1 (включительно). 
# Если одно из этих значений оказывается делителем числа num, тогда число num является составным и мы 
# устанавливаем значение флага False. Как только цикл завершен, мы проверяем, установлен флаг в True или нет. 
# Если это так, мы знаем, что делитель найден не был и число является простым. В противном случае число 
# является составным. Флаговые переменные могут иметь более осмысленное название. Например, в случае 
# с проверкой числа на простоту, название флаговой переменной могло бы быть is_prime.


## Максимум и минимум
# --------------------------------

# Поиск наибольшего или наименьшего значения в некоторой последовательности чисел – также частая задача в 
# программировании. Напишем программу, которая считывает 10 положительных чисел и находит среди них наибольшее 
# число.

count = 0
for i in range(3):
    num = int(input("Введите число: "))
    if num > count:
        count = num
print(count)

# Мы устанавливаем начальное значение переменной count в 0. Далее программа считывает 10 чисел, 
# и если какое-то из них оказывается больше текущего значения count, переприсваивает его. 
# В качестве начального значения взято число 0, поскольку мы знаем, что все числа положительны (а 0 
# является максимальным неположительным числом). Таким образом, уже первое сравнение приведет к переприсваиванию.

# Распространен подход, когда в качестве начального значения переменной сразу принимается первый элемент 
# последовательности. Напишем программу, которая считывает 10 чисел (необязательно положительных) 
# и находит среди них наибольшее:

largest = int(input())  # принимаем первое число за максимальное
for _ in range(9):
    num = int(input())
    if num > largest:
        largest = num

print('Наибольшее число равно', largest)

# Для нахождения наименьшего значения последовательности следует поменять знак неравенства (>)
# на противоположный (<). В таком случае название переменной largest стоит заменить на smallest.

## Примечания
# --------------------------------

# Примечание 1. Аналогичным образом можно менять местами значения трех и более переменных.
# a, b, c, d = b, c, d, a

# Примечание 2. Очень часто сигнальные метки называют flag.

# Примечание 3. Поскольку в Python есть встроенные функции max() и min(), то давать такие названия для 
# максимального и минимального значения не очень хорошо. Куда лучше использовать названия 
# largest и smallest или mx и mn.

# Примечание 4. Сумму чисел от 1 до 100, можно вычислить и без цикла: 
# Сумма = (1 + 100) / 2 * 100 = 5050

# Действительно, числа от 1 до 100, можно разбить на 50 пар, сумма в которых равна 101

