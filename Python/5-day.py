#####################################################
## День 5. Тема урока: числовые типы данных         #
#####################################################

## Целочисленный тип данных
# --------------------------

# Целые числа в Python представлены типом данных int (сокращение int происходит от слова integer). Для определения целого числа типа int используется последовательность цифр от 0 до 9.

# Явно указанное численное значение в коде программы называется целочисленным литералом. Когда Python встречает целочисленный литерал, он создает объект типа int, хранящий указанное значение.

n = 17  # целочисленный литерал
m = 7   # целочисленный литерал

# Целочисленный тип данных int используют не только потому, что он встречается в реальном мире, но и потому, что он естественным образом возникает при создании 
# большинства программ.

## Преобразование строки в целое число
# --------------------------------------

# Для преобразования строки в целое число, мы используем команду int():

num = int(input())  # преобразование считанной строки в целое число
# Для преобразования строки в целое число не обязательно использовать команду input().

# Следующий код преобразует строку 12345 в целое число:

n = int('12345')  # преобразование строки в целое число

# ! Если строка не является числом, то при преобразовании возникнет ошибка.

## Целочисленные операторы
# ------------------------

# Язык Python предоставляет четыре основных арифметических оператора для работы с целыми числами (+, −, *, /), 
# а также три дополнительных (% для остатка, // для целочисленного деления и ** для возведения в степень).

a = 13
b = 7

total = a + b
diff = a - b
prod = a * b
div1 = a / b
div2 = a // b
mod = a % b
exp = a ** b

print(a, '+', b, '=', total) # 13 + 7 = 20
print(a, '-', b, '=', diff)  # 13 - 7 = 6
print(a, '*', b, '=', prod)  # 13 * 7 = 91
print(a, '/', b, '=', div1)  # 13 / 7 = 1.8571428571428572
print(a, '//', b, '=', div2) # 13 // 7 = 1
print(a, '%', b, '=', mod)   # 13 % 7 = 6
print(a, '**', b, '=', exp)  # 13 ** 7 = 62748517

# При обычном делении (/) получается число не являющееся целым. Деление на ноль приводит к ошибке.

# Для удобного чтения чисел можно использовать символ подчеркивания:

num1 = 25_000_000
num2 = 25000000
print(num1)
print(num2)

# Результатом выполнения такого кода будет:

# 25000000
# 25000000

## Числа с плавающей точкой
# -------------------------

# Дробные (вещественные) числа в информатике называют числами с плавающей точкой.

# Для представления чисел с плавающей точкой в Python используется тип данных float.

e = 2.71828  # литерал с плавающей точкой
pi = 3.1415  # литерал с плавающей точкой

# В Python, когда вы используете операцию деления /, результат всегда будет числом с плавающей точкой, даже если оба числа являются целыми. Вот пример:

print(4 / 2)  # Результат: 2.0, а не 2

## Преобразование строки к числу с плавающей точкой
# -------------------------------------------------

# Для преобразования строки к числу с плавающей точкой мы используем команду float():

num = float(input()) # преобразование считанной строки в число с плавающей точкой
# Для преобразования строки к числу с плавающей точкой необязательно использовать команду input().

# Следующий код преобразует строку 1.2345 к числу с плавающей точкой:

n = float('1.2345')  # преобразование строки к числу с плавающей точкой

## Преобразование между int и float
# ---------------------------------

# Неявное преобразование. Любое целое число (тип int) можно использовать там, где ожидается число с плавающей точкой (тип float), поскольку при необходимости Python 
# автоматически преобразует целые числа в числа с плавающей точкой.

# Явное преобразование. Число с плавающей точкой нельзя неявно преобразовать в целое число. Для такого преобразования необходимо использовать явное преобразование 
# с помощью команды int().

num1 = 17.89
num2 = -13.56
num3 = int(num1)
num4 = int(num2)
print(num3) # 17
print(num4) # -13

# Обратите внимание, что преобразование чисел с плавающей точкой в целое производится с округлением в сторону нуля, 
# то есть int(1.7) = 1, int(-1.7) = -1.

## Встроенные функции
# -------------------

# Функции min() и max()

# Для определения соответственно минимального или максимального значения используются функции min() и max(). Аргументов у этих функций может быть любое количество, 
# главное, чтобы они все поддерживали между собой операцию сравнения (например, float и int поддерживают сравнение, а float и str - нет).

a = max(3, 8, -3, 12, 9)
b = min(3, 8, -3, 12, 9)
c = max(3.14, 2.17, 9.8)

print(a) # 12
print(b) # -3
print(c) # 9.8